// Generated by gencpp from file tug_resource_monitor/NodeInfo.msg
// DO NOT EDIT!


#ifndef TUG_RESOURCE_MONITOR_MESSAGE_NODEINFO_H
#define TUG_RESOURCE_MONITOR_MESSAGE_NODEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tug_resource_monitor
{
template <class ContainerAllocator>
struct NodeInfo_
{
  typedef NodeInfo_<ContainerAllocator> Type;

  NodeInfo_()
    : name()
    , pid(0)
    , hostname()
    , cpu(0.0)
    , memory(0)
    , error(0)  {
    }
  NodeInfo_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , pid(0)
    , hostname(_alloc)
    , cpu(0.0)
    , memory(0)
    , error(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint32_t _pid_type;
  _pid_type pid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hostname_type;
  _hostname_type hostname;

   typedef float _cpu_type;
  _cpu_type cpu;

   typedef uint64_t _memory_type;
  _memory_type memory;

   typedef uint32_t _error_type;
  _error_type error;



  enum {
    NO_ERROR = 0u,
    ERROR_PID_NOT_FOUND = 1u,
  };


  typedef boost::shared_ptr< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> const> ConstPtr;

}; // struct NodeInfo_

typedef ::tug_resource_monitor::NodeInfo_<std::allocator<void> > NodeInfo;

typedef boost::shared_ptr< ::tug_resource_monitor::NodeInfo > NodeInfoPtr;
typedef boost::shared_ptr< ::tug_resource_monitor::NodeInfo const> NodeInfoConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tug_resource_monitor::NodeInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tug_resource_monitor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'tug_resource_monitor': ['/home/anna/catkin_ws/src/model_based_diagnosis/tug_resource_monitor/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3df41a0cc3ca1f8f984ebc9825c7a08";
  }

  static const char* value(const ::tug_resource_monitor::NodeInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3df41a0cc3ca1f8ULL;
  static const uint64_t static_value2 = 0xf984ebc9825c7a08ULL;
};

template<class ContainerAllocator>
struct DataType< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tug_resource_monitor/NodeInfo";
  }

  static const char* value(const ::tug_resource_monitor::NodeInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n\
uint32 pid\n\
string hostname\n\
float32 cpu\n\
uint64 memory\n\
uint32 error\n\
uint32 NO_ERROR=0\n\
uint32 ERROR_PID_NOT_FOUND=1\n\
";
  }

  static const char* value(const ::tug_resource_monitor::NodeInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.pid);
      stream.next(m.hostname);
      stream.next(m.cpu);
      stream.next(m.memory);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tug_resource_monitor::NodeInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tug_resource_monitor::NodeInfo_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "pid: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pid);
    s << indent << "hostname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hostname);
    s << indent << "cpu: ";
    Printer<float>::stream(s, indent + "  ", v.cpu);
    s << indent << "memory: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.memory);
    s << indent << "error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUG_RESOURCE_MONITOR_MESSAGE_NODEINFO_H
