// Generated by gencpp from file tug_observers_msgs/observation.msg
// DO NOT EDIT!


#ifndef TUG_OBSERVERS_MSGS_MESSAGE_OBSERVATION_H
#define TUG_OBSERVERS_MSGS_MESSAGE_OBSERVATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tug_observers_msgs
{
template <class ContainerAllocator>
struct observation_
{
  typedef observation_<ContainerAllocator> Type;

  observation_()
    : observation_msg()
    , verbose_observation_msg()
    , observation(0)  {
    }
  observation_(const ContainerAllocator& _alloc)
    : observation_msg(_alloc)
    , verbose_observation_msg(_alloc)
    , observation(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _observation_msg_type;
  _observation_msg_type observation_msg;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _verbose_observation_msg_type;
  _verbose_observation_msg_type verbose_observation_msg;

   typedef int32_t _observation_type;
  _observation_type observation;



  enum {
    GENERAL_OK = 0,
    GENERAL_ERROR = -1,
    NO_STATE_FITS = -2,
    NOT_AVAILABLE = -3,
    TIMEOUT = -4,
  };


  typedef boost::shared_ptr< ::tug_observers_msgs::observation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tug_observers_msgs::observation_<ContainerAllocator> const> ConstPtr;

}; // struct observation_

typedef ::tug_observers_msgs::observation_<std::allocator<void> > observation;

typedef boost::shared_ptr< ::tug_observers_msgs::observation > observationPtr;
typedef boost::shared_ptr< ::tug_observers_msgs::observation const> observationConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tug_observers_msgs::observation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tug_observers_msgs::observation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tug_observers_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'tug_observers_msgs': ['/home/anna/catkin_ws/src/model_based_diagnosis/tug_observers/tug_observers_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tug_observers_msgs::observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_observers_msgs::observation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_observers_msgs::observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_observers_msgs::observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_observers_msgs::observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_observers_msgs::observation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tug_observers_msgs::observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "176310c5b8642d2cf705c70f2da7bc39";
  }

  static const char* value(const ::tug_observers_msgs::observation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x176310c5b8642d2cULL;
  static const uint64_t static_value2 = 0xf705c70f2da7bc39ULL;
};

template<class ContainerAllocator>
struct DataType< ::tug_observers_msgs::observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tug_observers_msgs/observation";
  }

  static const char* value(const ::tug_observers_msgs::observation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tug_observers_msgs::observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string observation_msg\n\
string verbose_observation_msg\n\
int32 observation\n\
int32 GENERAL_OK=0\n\
int32 GENERAL_ERROR=-1\n\
int32 NO_STATE_FITS=-2\n\
int32 NOT_AVAILABLE=-3\n\
int32 TIMEOUT=-4\n\
";
  }

  static const char* value(const ::tug_observers_msgs::observation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tug_observers_msgs::observation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.observation_msg);
      stream.next(m.verbose_observation_msg);
      stream.next(m.observation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct observation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tug_observers_msgs::observation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tug_observers_msgs::observation_<ContainerAllocator>& v)
  {
    s << indent << "observation_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.observation_msg);
    s << indent << "verbose_observation_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.verbose_observation_msg);
    s << indent << "observation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.observation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUG_OBSERVERS_MSGS_MESSAGE_OBSERVATION_H
