# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tug_observers_msgs/observation.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class observation(genpy.Message):
  _md5sum = "176310c5b8642d2cf705c70f2da7bc39"
  _type = "tug_observers_msgs/observation"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string observation_msg
string verbose_observation_msg
int32 observation
int32 GENERAL_OK=0
int32 GENERAL_ERROR=-1
int32 NO_STATE_FITS=-2
int32 NOT_AVAILABLE=-3
int32 TIMEOUT=-4
"""
  # Pseudo-constants
  GENERAL_OK = 0
  GENERAL_ERROR = -1
  NO_STATE_FITS = -2
  NOT_AVAILABLE = -3
  TIMEOUT = -4

  __slots__ = ['observation_msg','verbose_observation_msg','observation']
  _slot_types = ['string','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       observation_msg,verbose_observation_msg,observation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(observation, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.observation_msg is None:
        self.observation_msg = ''
      if self.verbose_observation_msg is None:
        self.verbose_observation_msg = ''
      if self.observation is None:
        self.observation = 0
    else:
      self.observation_msg = ''
      self.verbose_observation_msg = ''
      self.observation = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.observation_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.verbose_observation_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.observation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.observation_msg = str[start:end].decode('utf-8')
      else:
        self.observation_msg = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.verbose_observation_msg = str[start:end].decode('utf-8')
      else:
        self.verbose_observation_msg = str[start:end]
      start = end
      end += 4
      (self.observation,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.observation_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.verbose_observation_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.observation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.observation_msg = str[start:end].decode('utf-8')
      else:
        self.observation_msg = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.verbose_observation_msg = str[start:end].decode('utf-8')
      else:
        self.verbose_observation_msg = str[start:end]
      start = end
      end += 4
      (self.observation,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
