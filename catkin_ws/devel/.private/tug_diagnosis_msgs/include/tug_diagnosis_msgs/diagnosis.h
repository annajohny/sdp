// Generated by gencpp from file tug_diagnosis_msgs/diagnosis.msg
// DO NOT EDIT!


#ifndef TUG_DIAGNOSIS_MSGS_MESSAGE_DIAGNOSIS_H
#define TUG_DIAGNOSIS_MSGS_MESSAGE_DIAGNOSIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tug_diagnosis_msgs/resource_mode_assignement.h>

namespace tug_diagnosis_msgs
{
template <class ContainerAllocator>
struct diagnosis_
{
  typedef diagnosis_<ContainerAllocator> Type;

  diagnosis_()
    : diagnosis()  {
    }
  diagnosis_(const ContainerAllocator& _alloc)
    : diagnosis(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::tug_diagnosis_msgs::resource_mode_assignement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tug_diagnosis_msgs::resource_mode_assignement_<ContainerAllocator> >::other >  _diagnosis_type;
  _diagnosis_type diagnosis;





  typedef boost::shared_ptr< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> const> ConstPtr;

}; // struct diagnosis_

typedef ::tug_diagnosis_msgs::diagnosis_<std::allocator<void> > diagnosis;

typedef boost::shared_ptr< ::tug_diagnosis_msgs::diagnosis > diagnosisPtr;
typedef boost::shared_ptr< ::tug_diagnosis_msgs::diagnosis const> diagnosisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tug_diagnosis_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'tug_diagnosis_msgs': ['/home/anna/catkin_ws/src/model_based_diagnosis/tug_diagnosis/tug_diagnosis_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52161f8a0d1740c6fc459d4f815e3e6d";
  }

  static const char* value(const ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52161f8a0d1740c6ULL;
  static const uint64_t static_value2 = 0xfc459d4f815e3e6dULL;
};

template<class ContainerAllocator>
struct DataType< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tug_diagnosis_msgs/diagnosis";
  }

  static const char* value(const ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "resource_mode_assignement[] diagnosis\n\
\n\
================================================================================\n\
MSG: tug_diagnosis_msgs/resource_mode_assignement\n\
string resource\n\
string mode_msg\n\
int32 mode\n\
int32 GENERAL_OK=0\n\
int32 GENERAL_ERROR=-1\n\
";
  }

  static const char* value(const ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.diagnosis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct diagnosis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tug_diagnosis_msgs::diagnosis_<ContainerAllocator>& v)
  {
    s << indent << "diagnosis[]" << std::endl;
    for (size_t i = 0; i < v.diagnosis.size(); ++i)
    {
      s << indent << "  diagnosis[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tug_diagnosis_msgs::resource_mode_assignement_<ContainerAllocator> >::stream(s, indent + "    ", v.diagnosis[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUG_DIAGNOSIS_MSGS_MESSAGE_DIAGNOSIS_H
